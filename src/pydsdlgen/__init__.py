#
# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# Copyright (C) 2018-2019  UAVCAN Development Team  <uavcan.org>
# This software is distributed under the terms of the MIT License.
#
"""Code generator built on top of pydsdl.

Pydsdlgen uses pydsdl to generate text files using templates. While these
text files are often source code this module could also be used to generate
documentation or data interchange formats like JSON or XML.

The input to the pydsdlgen library is a list of templates and a list of
``pydsdl.serializable.CompositeType`` objects. The latter is typically obtained
by calling pydsdl::

    from pydsdl import read_namespace

    compound_types = read_namespace(root_namespace, include_paths)

:class:`pydsdlgen.generators.AbstractGenerator` objects require a map of these types
to the file that will be generated. This map can be built using
:meth:`pydsdlgen.create_type_map`::

    from pydsdlgen import create_type_map

    target_map = create_type_map(compound_types, out_dir, '.hpp')

Putting this all together, the typical use of this library looks something like this::

    from pydsdl import read_namespace
    from pydsdlgen import create_type_map
    from pydsdlgen.jinja import Generator

    # parse the dsdl
    compound_types = read_namespace(root_namespace, include_paths)

    # build a map of inputs to outputs
    target_map = create_type_map(compound_types, out_dir, '.hpp')

    # give this map to the generator and...
    generator = Generator(target_map, gen_paths.templates_dir)

    # generate all the code!
    generator.generate_all()

"""

from typing import List, Dict

import sys

from pathlib import Path, PurePath

from pydsdl import CompositeType

if sys.version_info[:2] < (3, 5):   # pragma: no cover
    print('A newer version of Python is required', file=sys.stderr)
    sys.exit(1)

# +---------------------------------------------------------------------------+


def create_type_map(types: List[CompositeType],
                    output_dir: str, extension: str) -> Dict[CompositeType, Path]:
    """Generates a map of types to generated files.

    Given a list of pydsdl types, this method returns a map of type to the
    file that will be generated by a generator. By pre-determining the output
    file this library allows build systems to properly build dependencies before
    running the generation step.

    :param list types: A list of pydsdl types.
    :param str output_dir: The base directory under which all generated files will be created.
    :param str extension: The extension to use for generated file types. All paths and filenames
            are built using pathlib. See pathlib documentation for platform differences
            when forming paths, filenames, and extensions.

    :returns: A map of pydsdl types to the path the type will be generated at.

    """
    base_path = PurePath(output_dir)

    type_to_output_map = dict()

    for dsdl_type in types:
        # For each type we form a path with the output_dir as the base; the intermediate
        # folders named for the type's namespaces; and a file name that includes the type's
        # short name, major version, minor version, and the extension argument as a suffix.
        # Python's pathlib adapts the provided folder and file names to the platform
        # this script is running on.

        namespace_components = dsdl_type.full_namespace.split('.')
        filestem = "{}_{}_{}".format(
            dsdl_type.short_name, dsdl_type.version.major, dsdl_type.version.minor)
        output_path = Path(
            base_path / PurePath(*namespace_components) / PurePath(filestem).with_suffix(extension))

        type_to_output_map[dsdl_type] = output_path

    return type_to_output_map
