//
// AUTOGENERATED, DO NOT EDIT.
//
//---------------------------------------------------------------------------------------------------------------------
// Language Options
{% for key, value in options.items() -%}
//     {{ key }}:  {{ value }}
{% endfor %}

{%- set ns = namespace(has_pmr = False) %}
{%- ifuses "pmr" %}
{%- set ns.has_pmr = True %}
{%- endifuses %}
{%- ifuses "cetl" %}
{%- set ns.has_pmr = True %}
{%- endifuses %}

#ifndef NUNAVUT_SUPPORT_UTILITIES_HPP_INCLUDED
#define NUNAVUT_SUPPORT_UTILITIES_HPP_INCLUDED

{% if ns.has_pmr %}
#include {{options.allocator_include}}
{%- endif %}
{% ifuses "variant" -%}
#include {{options.variant_include}}
{%- else -%}
#include <cstdint>
{%- endifuses %}

namespace nunavut
{
namespace support
{
{%- if ns.has_pmr %}
// Nunavut-generated message types for this build flavor use polymorphic allocators
static constexpr bool kHasPmr{true};

{% ifuses "cetl" %}
// Polymorphic memory resource
using memory_resource_type = cetl::pf17::pmr::memory_resource;
{%- else %}
using memory_resource_type = std::pmr::memory_resource;
{%- endifuses %}

// Polymorphic allocator base
template<typename T>
using allocator_type = {{options.allocator_type}}<T>;
{%- else %}
// The nunavut generated message types for this build flavor do not use polymorphic allocators
static constexpr bool kHasPmr{false};

// Standard allocator alias
template<typename T>
using allocator_type = std::allocator<T>;
{%- endif %}

// Value-specialized type for template instantiation
template<std::size_t I>
{% ifuses "variant" %}
{%- ifuses "cetl" %}
using in_place_index_t = cetl::pf17::in_place_index_t<I>;
{%- else %}
using in_place_index_t = std::in_place_index_t<I>;
{%- endifuses %}
{%- else -%}
struct in_place_index_t
{
    explicit in_place_index_t() = default;
};
{%- endifuses %}

{% ifuses "variant" %}
// Type-tagging for template instantiation
template<typename T>
{%- ifuses "cetl" %}
using in_place_type_t = cetl::pf17::in_place_type_t<T>;
{%- else %}
using in_place_type_t = std::in_place_type_t<T>;
{%- endifuses %}
{%- endifuses %}

} // end namespace support
} // end namespace nunavut

#endif // NUNAVUT_SUPPORT_UTILITIES_HPP_INCLUDED
