// OpenCyphal common union composite type support routines
//
// AUTOGENERATED, DO NOT EDIT.
//
//---------------------------------------------------------------------------------------------------------------------
// Language Options
{% for key, value in options.items() -%}
//     {{ key }}:  {{ value }}
{% endfor %}

#ifndef NUNAVUT_SUPPORT_UTILITIES_HPP_INCLUDED
#define NUNAVUT_SUPPORT_UTILITIES_HPP_INCLUDED

{% ifuses "std_variant" -%}
#include <utility>
{%- else -%}
#include <cstdint>
{%- endifuses %}

namespace nunavut
{
namespace support
{

// Value-specialized type for template instantiation
template<std::size_t I>
{% ifuses "std_variant" -%}
using in_place_index_t = std::in_place_index_t<I>;
{%- else -%}
struct in_place_index_t
{
    explicit in_place_index_t() = default;
};
{%- endifuses %}

} // end namespace support
} // end namespace nunavut

#endif // NUNAVUT_SUPPORT_UTILITIES_HPP_INCLUDED
