{#-
 # Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 # Copyright (C) 2021  UAVCAN Development Team  <uavcan.org>
 # This software is distributed under the terms of the MIT License.
#}
    class VariantType final
    {
    public:
        VariantType()
            : tag_(0)
            , internal_union_value_()
        {}

        //
        // Rule of Five.
        //
        VariantType(const VariantType&) = delete;
        VariantType& operator=(const VariantType&) = delete;
        VariantType(VariantType&&) = delete;
        VariantType& operator=(VariantType&&) = delete;

        ~VariantType()
        {
            destroy_current();
        }

        struct IndexOf final
        {
            IndexOf() = delete;
{%- for field in composite_type.fields_except_padding %}
            static constexpr const std::size_t {{ field.name | id }} = {{ loop.index0 }}U;
{%- endfor %}
        };

        template<std::size_t I, class...Types> struct alternative;

{% for field in composite_type.fields_except_padding %}
        template<class...Types> struct alternative<{{ loop.index0 }}U, Types...>
        {
            using type = {{ field.data_type | declaration }};
        };
{%- endfor %}

        template< std::size_t I, class... Args > typename VariantType::alternative<I, VariantType>::type& emplace(Args&&... v);

        template<std::size_t I, class... Types>
        static constexpr typename VariantType::alternative<I, VariantType>::type* get_if(VariantType* v) noexcept;

        template<std::size_t I, class... Types>
        static constexpr const typename VariantType::alternative<I, VariantType>::type* get_if(const VariantType* v) noexcept;

    private:

        void destroy_current()
        {
{%- for field in composite_type.fields_except_padding if field is not PrimitiveType %}
            {% if not loop.first %}else {% endif %}if (tag_ == {{ loop.index0 }})
            {
                reinterpret_cast<{{ field.data_type | declaration }}*>(std::addressof(internal_union_value_.{{ field.name | id }}))->{{ field.data_type | destructor_name }}();
            }
{%- endfor %}
        }

        {{ composite_type.tag_field_type | declaration }} tag_;

        union
        {
{%- for field in composite_type.fields_except_padding %}
            {{ field.doc | block_comment('cpp-doxygen', 12, 120) }}
            std::aligned_storage<sizeof({{ field.data_type | declaration }}), alignof({{ field.data_type | declaration }})>::type {{ field.name | id }};
{%- endfor %}
        } internal_union_value_;

    };

    VariantType union_value;
