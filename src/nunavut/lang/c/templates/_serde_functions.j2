/// Serialization of {{ composite_type | full_reference_name }} instance into a byte array.
///
/// @param in_instance   A structure instance to serialize.
/// @param offset        Offset (in bits) of data type in message.
/// @param out_buffer    Output message buffer.
/// @param out_size_bits Size of serialized output (in bits).
///
/// @returns             Error type. Negative values on failure, 0 on success.
static inline {{typename_error_type}} {{ composite_type | full_reference_name }}_serialize(const {{ composite_type | full_reference_name }}* in_instance, {{typename_unsigned_bit_length}} offset, uint8_t* const out_buffer, {{typename_unsigned_length}} buf_size_bytes, {{typename_unsigned_bit_length}}* out_size_bits)
{
    *out_size_bits = 0;
{%- if (composite_type.fields | length) > 0 %}
    if (out_buffer == NULL)
    {
        return -NUNAVUT_ERR_INVALID_BUF;
    }

    {%- from '_serialize.j2' import serialize %}
    {{ serialize(composite_type) }}
{%- else %}
    (void)buf_size_bytes;
    (void)in_instance;
    (void)out_buffer;
    (void)offset;
{%- endif %}

    return NUNAVUT_SUCCESS;
}

/// Deserialization of byte-array encoding into {{ composite_type | full_reference_name }} instance.
///
/// @param out_instance      Structure instance to write data to.
/// @param offset            Bit offset of structure in data buffer.
/// @param in_buffer         Message buffer to deserialize.
/// @param buf_size_bytes    Length of input buffer (in bytes) to avoid overflow.
/// @param in_size_bits      Length of deserialized data (in bits).
///
/// @returns                 Error type. Negative values on failure, 0 on success.
static inline {{typename_error_type}} {{ composite_type | full_reference_name }}_deserialize({{ composite_type | full_reference_name }}* const out_instance, {{typename_unsigned_bit_length}} offset, uint8_t* const in_buffer, const {{typename_unsigned_length}} buf_size_bytes, {{typename_unsigned_bit_length}}* in_size_bits)
{
    *in_size_bits = 0;
{%- if (composite_type.fields | length) > 0 %}
    if (in_buffer == NULL)
    {
        return -NUNAVUT_ERR_INVALID_BUF;
    }

    {%- from '_deserialize.j2' import deserialize %}
    {{ deserialize(composite_type) }}
{%- else %}
    (void)out_instance;
    (void)in_buffer;
    (void)buf_size_bytes;
    (void)offset;
{%- endif %}

    return NUNAVUT_SUCCESS;
}
