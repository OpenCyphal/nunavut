
[nunavut.lang.c]
extension = .h
namespace_file_stem = _namespace_
has_standard_namespace_files = False
support_namespace = nunavut.support
# Taken from https://en.cppreference.com/w/c/keyword
reserved_identifiers =
    asm
    auto
    break
    case
    char
    const
    continue
    default
    defined
    do
    double
    error
    else
    elif
    endif
    enum
    extern
    float
    for
    fortran
    goto
    if
    ifdef
    ifndef
    include
    inline
    int
    line
    long
    pragma
    register
    restrict
    return
    short
    signed
    sizeof
    static
    struct
    switch
    typedef
    undef
    union
    unsigned
    void
    volatile
    while
    _Alignas
    _Alignof
    _Atomic
    _Bool
    _Complex
    _Generic
    _Imaginary
    _Noreturn
    _Pragma
    _Static_assert
    _Thread_local
enable_stropping = True
encoding_prefix = ZX
stropping_prefix = _
stropping_suffix =
use_standard_types = True
named_types =
    unsigned_length = size_t
    byte = uint8_t


[nunavut.lang.cpp]
extension = .hpp
namespace_file_stem = _namespace_
has_standard_namespace_files = False
support_namespace = ${nunavut.lang.c:support_namespace}
# Taken from https://en.cppreference.com/w/cpp/keyword
reserved_identifiers =
    ${nunavut.lang.c:reserved_identifiers}
    alignas
    alignof
    and
    and_eq
    asm
    atomic_cancel
    atomic_commit
    atomic_noexcept
    auto
    bitand
    bitor
    bool
    break
    case
    catch
    char
    char8_t
    char16_t
    char32_t
    class
    compl
    concept
    const
    consteval
    constexpr
    constinit
    const_cast
    continue
    co_await
    co_return
    co_yield
    decltype
    default
    delete
    do
    double
    dynamic_cast
    else
    enum
    explicit
    export
    extern
    false
    float
    for
    friend
    goto
    if
    inline
    int
    long
    mutable
    namespace
    new
    noexcept
    not
    not_eq
    nullptr
    operator
    or
    or_eq
    private
    protected
    public
    reflexpr
    register
    reinterpret_cast
    requires
    return
    short
    signed
    sizeof
    static
    static_assert
    static_cast
    struct
    switch
    synchronized
    template
    this
    thread_local
    throw
    true
    try
    typedef
    typeid
    typename
    union
    unsigned
    using
    virtual
    void
    volatile
    wchar_t
    while
    xor
    xor_eq
    override
    final
    import
    module
    transaction_safe
    transaction_safe_dynamic
    _Pragma
    if
    elif
    else
    endif
    ifdef
    ifndef
    define
    undef
    include
    line
    error
    pragma
    defined
    __has_include
    __has_cpp_attribute
enable_stropping = ${nunavut.lang.c:enable_stropping}
encoding_prefix = ${nunavut.lang.c:encoding_prefix}
stropping_prefix = ${nunavut.lang.c:stropping_prefix}
stropping_suffix = ${nunavut.lang.c:stropping_suffix}
use_standard_types = ${nunavut.lang.c:use_standard_types}
named_types =
    unsigned_length = std::size_t
    byte = std::uint8_t
    byte_ptr = std::uint8_t*

[nunavut.lang.py]
extension = .py
has_standard_namespace_files = True
namespace_file_stem = __init__
enable_stropping = ${nunavut.lang.c:enable_stropping}
encoding_prefix = ${nunavut.lang.c:encoding_prefix}
stropping_prefix =
stropping_suffix = _

[nunavut.lang.js]
extension = .js
has_standard_namespace_files = False
namespace_file_stem = _namespace_
enable_stropping = ${nunavut.lang.c:enable_stropping}
encoding_prefix = ${nunavut.lang.c:encoding_prefix}
stropping_prefix = ${nunavut.lang.c:stropping_prefix}
stropping_suffix = ${nunavut.lang.c:stropping_suffix}
