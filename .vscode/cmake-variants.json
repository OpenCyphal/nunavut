{
    "buildType": {
        "default": "debug",
        "description": "Variant for verification build kits.",
        "choices": {
            "asan": {
                "short": "Asan",
                "long": "Address sanitizer builds.",
                "buildType": "Debug",
                "settings": {
                    "NUNAVUT_FLAGSET": "${workspaceFolder}/verification/cmake/compiler_flag_sets/native_w_asan.cmake"
                }
            },
            "coverage": {
                "short": "Cov",
                "long": "Coverage builds.",
                "buildType": "Debug",
                "settings": {
                    "NUNAVUT_FLAGSET": "${workspaceFolder}/verification/cmake/compiler_flag_sets/native_w_cov.cmake"
                }
            },
            "debug": {
                "short": "Debug",
                "long": "Debug builds, no optimizations.",
                "buildType": "Debug",
                "settings": {
                    "NUNAVUT_FLAGSET": "${workspaceFolder}/verification/cmake/compiler_flag_sets/native.cmake"
                }
            },
            "release": {
                "short": "Release",
                "long": "Release builds, some optimizations",
                "buildType": "Release",
                "settings": {
                    "NUNAVUT_FLAGSET": "${workspaceFolder}/verification/cmake/compiler_flag_sets/native.cmake"
                }
            }
        }
    },
    "target":{
        "default": "native",
        "choices": {
            "native": {
                "short": "native",
                "long": "Target whatever default cmake has for the current machine."
            },
            "native32": {
                "short": "native32",
                "long": "Compile for the current machine but force 32-bit code.",
                "settings": {
                    "NUNAVUT_VERIFICATION_TARGET_PLATFORM": "native32"
                }
            },
            "native64": {
                "short": "native64",
                "long": "Compile for the current machine but force 64-bit code.",
                "settings": {
                    "NUNAVUT_VERIFICATION_TARGET_PLATFORM": "native64"
                }
            }
        }
    },
    "endianness":{
        "default": "any",
        "choices": {
            "any": {
                "short": "any",
                "long": "Generate code that works on either big or little endianness."
            },
            "little": {
                "short": "little",
                "long": "Generate code for little-endian targets.",
                "settings": {
                    "NUNAVUT_VERIFICATION_TARGET_ENDIANNESS": "little"
                }
            },
            "big": {
                "short": "big",
                "long": "Generate code for big-endian targets.",
                "settings": {
                    "NUNAVUT_VERIFICATION_TARGET_ENDIANNESS": "big"
                }
            }
        }
    },
    "language":{
        "default": "C++14",
        "choices": {
            "C": {
                "short": "(c default)",
                "long": "Compile and link using the C11 standard.",
                "settings": {
                    "NUNAVUT_VERIFICATION_LANG": "c",
                    "NUNAVUT_VERIFICATION_LANG_STANDARD": ""
                }
            },
            "C11": {
                "short": "-std=c11",
                "long": "Compile and link using the C11 standard.",
                "settings": {
                    "NUNAVUT_VERIFICATION_LANG": "c",
                    "NUNAVUT_VERIFICATION_LANG_STANDARD": "c11"
                }
            },
            "Cgnu17": {
                "short": "-std=gnu17",
                "long": "Compile and link using the C11 standard.",
                "settings": {
                    "NUNAVUT_VERIFICATION_LANG": "c",
                    "NUNAVUT_VERIFICATION_LANG_STANDARD": "c11"
                }
            },
            "C++14": {
                "short": "--std=c++14",
                "long": "Compile and link using the C++14 standard.",
                "settings": {
                    "NUNAVUT_VERIFICATION_LANG": "cpp",
                    "NUNAVUT_VERIFICATION_LANG_STANDARD": "c++14"
                }
            },
            "CETL++": {
                "short": "--std=cetl++14-17",
                "long": "Compile and link using the C++14 standard and use CETL C++17 polyfill types.",
                "settings": {
                    "NUNAVUT_VERIFICATION_LANG": "cpp",
                    "NUNAVUT_VERIFICATION_LANG_STANDARD": "cetl++14-17"
                }
            },
            "C++17": {
                "short": "--std=c++17",
                "long": "Compile and link using the C++17 standard.",
                "settings": {
                    "NUNAVUT_VERIFICATION_LANG": "cpp",
                    "NUNAVUT_VERIFICATION_LANG_STANDARD": "c++17"
                }
            },
            "C++17 PMR": {
                "short": "--std=c++17-pmr",
                "long": "Compile and link using the C++17 standard and use std polymorphic allocator.",
                "settings": {
                    "NUNAVUT_VERIFICATION_LANG": "cpp",
                    "NUNAVUT_VERIFICATION_LANG_STANDARD": "c++17-pmr"
                }
            },
            "C++20": {
                "short": "--std=c++20",
                "long": "Compile and link using the C++20 standard.",
                "settings": {
                    "NUNAVUT_VERIFICATION_LANG": "cpp",
                    "NUNAVUT_VERIFICATION_LANG_STANDARD": "c++20"
                }
            },
            "C++20 PMR": {
                "short": "--std=c++20-pmr",
                "long": "Compile and link using the C++20 standard and use std polymorphic allocator.",
                "settings": {
                    "NUNAVUT_VERIFICATION_LANG": "cpp",
                    "NUNAVUT_VERIFICATION_LANG_STANDARD": "c++20-pmr"
                }
            }
        }
    }
}
