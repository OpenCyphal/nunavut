#
# This is a test dummy and not the real type.
#

uavcan.si.unit.mass.Scalar.1.0 mass
# The total mass of the pack, including the packaging, electronics, cabling, and all auxiliary items, if any.
# NaN if unknown.

uavcan.si.unit.electric_charge.Scalar.1.0 design_capacity
# The maximum total charge of the pack, at 100% SoH, specified by the manufacturer.
# NaN if unknown.

uavcan.si.unit.electric_current.Scalar.1.0 design_load_current
# The maximum load current of the pack specified by the manufacturer.
# NaN if unknown.

uavcan.si.unit.voltage.Scalar.1.0[3] design_cell_voltage_min_typ_max
# The minimum (end of discharge), nominal (resting), and the maximum (end of charge) cell voltages
# specified by the manufacturer. The number of cells is reported in the status message.
# Constraints: minimum <= nominal <= maximum.
# Use best guess or NaN if any of the values are unknown.
# Example: [2.8, 3.6, 4.2] V.

uavcan.si.unit.voltage.Scalar.1.0          design_charging_voltage
uavcan.si.unit.electric_current.Scalar.1.0 design_charging_current
# The charging parameters specified by the manufacturer for the pack.
# This is a reflection of similar parameters from the Smart Battery Data Specification.
# NaN if unknown.

uint32 CYCLE_COUNT_UNKNOWN = 2 ** 32 - 1
uint32 cycle_count
# The number of charge-discharge cycles. Zero if the battery is new. May increase at runtime.
# What constitutes a charge-discharge cycle is implementation-defined.

Technology.0.1 technology
# Shall not change at runtime.

uint7 state_of_health
# The SoH of the pack, ranges from 0 to 100. May change at runtime.
# If not provided by the BMS, use best guess or report 100%.
void1

void64
void64

uint64 vendor_specific_parameter
# Vendor-specific identification or diagnostic information. May change at runtime depending on its use.

uint64 unique_id
# The unique identifier of the battery whose parameters are reported.
# Vendors should obtain a random ID for every manufactured battery.
# If the battery is interfaced via SBS, the unique ID can be computed as a hash
# of the manufacturer name, device name, serial number, and the manufacture date.

@assert (_offset_ % 8 == {0}) && (_offset_.count == 1)

uint8[<64] name
# The name of the vendor and model encoded in UTF8.
# Example: "MyBattCo MBC101 v1.1"

@assert _offset_ % 8 == {0}
@sealed
