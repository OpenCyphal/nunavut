#
# The standard version to develop against is 3.10.
#
[tox]
envlist = {py37,py38,py39,py310,py311,py312}-{test,nnvg,doctest,rstdoctest},lint,report,docs


[base]
deps =
    Sybil
    pytest
    pytest-timeout
    coverage
    types-PyYAML

[dev]
deps =
    {[base]deps}
    autopep8
    rope
    isort
    nox

# +---------------------------------------------------------------------------+
# | CONFIGURATION
# +---------------------------------------------------------------------------+


[pylint]
max-line-length = 120
max-args = 8
max-attributes = 12
ignore-paths = .*/(jinja2|markupsafe)/.*
min-public-methods = 0
source-roots = src
disable = no-else-return,invalid-name


[pytest]
log_file = pytest.log
log_level = DEBUG
log_cli = true
log_cli_level = WARNING
norecursedirs = submodules .* build* verification .tox
addopts = -p no:doctest

[coverage:run]
data_file = build/coverage-py/.coverage
branch=True
parallel=True
relative_files = True
include =
    src/nunavut/*
    .tox/*/site-packages/nunavut/*

omit =
    */jinja2/*
    */markupsafe/*
    */setup.py
    */conf.py
    */embed_jinja.py


[coverage:paths]
source =
    src
    .tox/*/site-packages
    .tox/*/bin


[coverage:report]
exclude_also =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    assert False
    if False:
    if __name__ == .__main__.:
omit = *.j2

[doc8]
max-line-length = 120
verbose = 1


[mypy]
# Python version is not specified to allow checking against different versions
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True
check_untyped_defs = True
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
show_error_context = True
mypy_path = src
exclude = (jinja2|markupsafe)

[mypy-pydsdl]
ignore_missing_imports = True

[mypy-nunavut.jinja.jinja2.*]
follow_imports = skip

[mypy-pytest.*]
ignore_missing_imports = True

[mypy-sybil.*]
ignore_missing_imports = True

[mypy-setuptools.*]
ignore_missing_imports = True

[mypy-importlib_resources.*]
ignore_missing_imports = True

# +---------------------------------------------------------------------------+
# | TOX ENVIRONMENTS
# +---------------------------------------------------------------------------+


[testenv]
usedevelop = true
setenv =
    PYTHONDONTWRITEBYTECODE=1
    PYTHONPATH={toxinidir}/test

passenv =
    GITHUB
    GITHUB_*

deps =
    test,nnvg,doctest,rstdoctest: {[base]deps}

commands =

    nnvg: coverage run \
    nnvg:        -m nunavut \
    nnvg:        -O {envtmpdir} \
    nnvg:        --target-language cpp \
    nnvg:        --experimental-languages \
    nnvg:        --language-standard c++17-pmr \
    nnvg:        -v \
    nnvg:        {toxinidir}/submodules/public_regulated_data_types/uavcan

    test: coverage run \
    test:    -m pytest {posargs} --basetemp={envtmpdir} -p "no:cacheprovider" \
    test:    --junit-xml={envtmpdir}/xunit-result.xml \
    test:    --rootdir={toxinidir} \
    test:    {toxinidir}/test

    doctest: coverage run \
    doctest:    -m pytest {posargs} --basetemp={envtmpdir} -p "no:cacheprovider" \
    doctest:    --rootdir={toxinidir} \
    doctest:    {toxinidir}/src

    rstdoctest: pytest {posargs} --basetemp={envtmpdir} -p "no:cacheprovider" \
    rstdoctest:    --rootdir={toxinidir} \
    rstdoctest:    {toxinidir}/docs


[testenv:docs]
deps =
    -rrequirements.txt
    sphinx
    readthedocs-sphinx-ext
commands =
    sphinx-build -W -b html {toxinidir} {envtmpdir}


[testenv:report]
deps = coverage
skip_install = true
commands =
    coverage combine --append
    coverage html -d {envtmpdir}
    coverage xml -o {envtmpdir}/coverage.xml


[testenv:lint]
basepython = python3.10
deps =
    {[dev]deps}
    black
    pylint
    doc8
    Pygments
    mypy
    lxml
    types-pkg_resources
    types-PyYAML

commands =
    pylint --reports=y \
           --rcfile={toxinidir}/tox.ini \
           --output={envtmpdir}/pylint.txt \
           --output-format=json2 \
           --clear-cache-post-run=y \
           --confidence=HIGH \
           {toxinidir}/src/nunavut
    black --check --line-length 120 --force-exclude '(/jinja2/|/markupsafe\/)' src
    doc8 {toxinidir}/docs
    mypy -p nunavut \
         --cache-dir {envtmpdir} \
         --txt-report {envtmpdir}/mypy-report-lib \
         --config-file {toxinidir}/tox.ini


[testenv:package]
deps =
    wheel
    twine

commands =
    python setup.py \
        sdist -d {toxworkdir}/package/dist \
        bdist_wheel -d {toxworkdir}/package/dist \
                    -b {envtmpdir}/tmp \
                    -k \
                    --build-number {env:GITHUB_RUN_ID:0}
    twine check {toxworkdir}/package/dist/*

[testenv:local]
usedevelop = true
deps =
    {[base]deps}
    {[dev]deps}
    {[testenv:docs]deps}
    {[testenv:lint]deps}
commands =
    python --version
